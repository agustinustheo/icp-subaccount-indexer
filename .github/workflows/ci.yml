name: CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  test-unit:
    name: Unit Tests
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 8

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install

      - name: Run format check
        run: pnpm run format:check

      - name: Run type check
        run: pnpm run type-check

      - name: Run unit tests
        run: cd packages/icsi-lib && pnpm run test:unit

  test-backend:
    name: Backend Tests
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true
          components: rustfmt, clippy

      - name: Add wasm32 target
        run: rustup target add wasm32-unknown-unknown

      - name: Run Rust format check
        run: cargo fmt --all -- --check

      - name: Run Rust clippy
        run: cargo clippy -- -D warnings

      - name: Run Rust tests
        run: cargo test

  test-e2e:
    name: End-to-End Tests
    runs-on: ubuntu-latest
    
    services:
      docker:
        image: docker:dind
        options: --privileged

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 8

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install

      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Run E2E tests with Docker
        run: cd packages/icsi-lib && pnpm run docker:e2e:ci
        timeout-minutes: 15

      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: failure()
        with:
          name: e2e-test-results
          path: |
            packages/icsi-lib/coverage/
            packages/icsi-lib/.env.docker

  build-canister:
    name: Build Canister
    runs-on: ubuntu-latest
    needs: [test-unit, test-backend]
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 8

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'pnpm'

      - name: Setup Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true

      - name: Add wasm32 target
        run: rustup target add wasm32-unknown-unknown

      - name: Install DFX
        run: |
          ARCH=$(uname -m)
          if [ "$ARCH" = "x86_64" ]; then
            DFX_VERSION=0.23.0 sh -ci "$(curl -fsSL https://internetcomputer.org/install.sh)"
          else
            echo "Architecture $ARCH not supported for DFX installation in CI"
            exit 1
          fi

      - name: Install dependencies
        run: pnpm install

      - name: Build canister
        run: pnpm run build:canister

      - name: Upload canister artifacts
        uses: actions/upload-artifact@v4
        with:
          name: canister-build
          path: |
            target/wasm32-unknown-unknown/release/*.wasm
            src/icp_subaccount_indexer/icp_subaccount_indexer.did

  security-audit:
    name: Security Audit
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 8

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install

      - name: Run npm audit
        run: pnpm audit --audit-level high

      - name: Setup Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true

      - name: Install cargo-audit
        run: cargo install cargo-audit

      - name: Run cargo audit
        run: cargo audit

  lint-and-format:
    name: Lint and Format Check
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 8

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install

      - name: Check TypeScript/JavaScript formatting
        run: cd packages/icsi-lib && pnpm run format:check

      - name: Setup Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true
          components: rustfmt

      - name: Check Rust formatting
        run: cargo fmt --all -- --check

  integration-test-summary:
    name: Integration Test Summary
    runs-on: ubuntu-latest
    needs: [test-unit, test-backend, test-e2e, build-canister, security-audit, lint-and-format]
    if: always()
    
    steps:
      - name: Check test results
        run: |
          echo "Unit Tests: ${{ needs.test-unit.result }}"
          echo "Backend Tests: ${{ needs.test-backend.result }}"
          echo "E2E Tests: ${{ needs.test-e2e.result }}"
          echo "Build: ${{ needs.build-canister.result }}"
          echo "Security Audit: ${{ needs.security-audit.result }}"
          echo "Lint and Format: ${{ needs.lint-and-format.result }}"
          
          # Fail if any critical tests failed
          if [[ "${{ needs.test-unit.result }}" == "failure" || 
                "${{ needs.test-backend.result }}" == "failure" || 
                "${{ needs.build-canister.result }}" == "failure" ]]; then
            echo "Critical tests failed!"
            exit 1
          fi
          
          # Warn about non-critical failures
          if [[ "${{ needs.test-e2e.result }}" == "failure" ]]; then
            echo "⚠️ E2E tests failed - this may indicate environment issues"
          fi
          
          if [[ "${{ needs.security-audit.result }}" == "failure" ]]; then
            echo "⚠️ Security audit failed - review security issues"
          fi
          
          if [[ "${{ needs.lint-and-format.result }}" == "failure" ]]; then
            echo "⚠️ Lint/format checks failed - code style issues detected"
          fi
          
          echo "✅ Integration test pipeline completed"