name: Release and Deploy

on:
  release:
    types: [published]
  workflow_dispatch:
    inputs:
      environment:
        description: "Deployment environment"
        required: true
        default: "testnet"
        type: choice
        options:
          - testnet
          - mainnet

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  validate-release:
    name: Validate Release
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          run_install: false

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: "pnpm"
          cache-dependency-path: "pnpm-lock.yaml"

      - name: Install dependencies
        run: pnpm install

      - name: Run all tests
        run: |
          cd packages/icsi-lib
          pnpm run test:unit
          pnpm run test:ci

      - name: Build and validate canister
        run: |
          pnpm run build:canister

          # Validate canister build
          if [ ! -f "target/wasm32-unknown-unknown/release/icp_subaccount_indexer.wasm" ]; then
            echo "❌ Canister WASM not found!"
            exit 1
          fi

          # Check WASM size (should be reasonable for IC deployment)
          WASM_SIZE=$(stat -c%s "target/wasm32-unknown-unknown/release/icp_subaccount_indexer.wasm")
          echo "📦 Canister WASM size: $WASM_SIZE bytes"

          if [ $WASM_SIZE -gt 2097152 ]; then # 2MB limit
            echo "⚠️ WASM size is large (>2MB), this may require significant cycles"
          fi

  build-docker-image:
    name: Build Docker Image
    runs-on: ubuntu-latest
    needs: validate-release

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./packages/icsi-lib/docker/Dockerfile.dfx
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  publish-library:
    name: Publish NPM Library
    runs-on: ubuntu-latest
    needs: validate-release
    if: github.event_name == 'release'

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          run_install: false

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: "pnpm"
          cache-dependency-path: "pnpm-lock.yaml"
          registry-url: "https://registry.npmjs.org"

      - name: Install dependencies
        run: pnpm install

      - name: Build library
        run: cd packages/icsi-lib && pnpm run build

      - name: Publish to NPM
        run: cd packages/icsi-lib && pnpm publish --access public
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

  deploy-testnet:
    name: Deploy to Testnet
    runs-on: ubuntu-latest
    needs: [validate-release, build-docker-image]
    if: github.event.inputs.environment == 'testnet' || (github.event_name == 'release' && !contains(github.ref, '-alpha') && !contains(github.ref, '-beta'))
    environment: testnet

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup DFX
        run: |
          DFX_VERSION=0.23.0 sh -ci "$(curl -fsSL https://internetcomputer.org/install.sh)"

      - name: Setup deployment identity
        run: |
          echo "${{ secrets.DFX_TESTNET_IDENTITY }}" | base64 -d > /tmp/identity.pem
          dfx identity import testnet_deployer /tmp/identity.pem
          dfx identity use testnet_deployer
          rm /tmp/identity.pem

      - name: Deploy to testnet
        run: |
          echo "🚀 Deploying to testnet..."

          # Set testnet network
          export DFX_NETWORK=ic

          # Build canister
          pnpm run build:canister

          # Deploy using script (if exists) or manual deployment
          if [ -f "./scripts/deploy-testnet.sh" ]; then
            ./scripts/deploy-testnet.sh
          else
            echo "⚠️ No testnet deployment script found, using manual deployment"
            dfx deploy icp_subaccount_indexer --network ic --with-cycles 1000000000000
          fi

          echo "✅ Testnet deployment completed"

  deploy-mainnet:
    name: Deploy to Mainnet
    runs-on: ubuntu-latest
    needs: [validate-release, build-docker-image, deploy-testnet]
    if: github.event.inputs.environment == 'mainnet' || (github.event_name == 'release' && !contains(github.ref, '-alpha') && !contains(github.ref, '-beta') && !contains(github.ref, '-rc'))
    environment: mainnet

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup DFX
        run: |
          DFX_VERSION=0.23.0 sh -ci "$(curl -fsSL https://internetcomputer.org/install.sh)"

      - name: Setup deployment identity
        run: |
          echo "${{ secrets.DFX_MAINNET_IDENTITY }}" | base64 -d > /tmp/identity.pem
          dfx identity import mainnet_deployer /tmp/identity.pem
          dfx identity use mainnet_deployer
          rm /tmp/identity.pem

      - name: Deploy to mainnet
        run: |
          echo "🚀 Deploying to mainnet..."

          # Set mainnet network
          export DFX_NETWORK=ic
          export DFX_WARNING=-mainnet_plaintext_identity

          # Build canister
          pnpm run build:canister

          # Deploy using the official deployment script
          if [ -f "./scripts/deploy-mainnet.sh" ]; then
            ./scripts/deploy-mainnet.sh upgrade
          else
            echo "❌ Mainnet deployment script not found!"
            exit 1
          fi

          echo "✅ Mainnet deployment completed"

  notify-deployment:
    name: Notify Deployment Status
    runs-on: ubuntu-latest
    needs: [deploy-testnet, deploy-mainnet]
    if: always() && (needs.deploy-testnet.result != 'skipped' || needs.deploy-mainnet.result != 'skipped')

    steps:
      - name: Deployment Summary
        run: |
          echo "🎯 Deployment Summary:"
          echo "Testnet: ${{ needs.deploy-testnet.result }}"
          echo "Mainnet: ${{ needs.deploy-mainnet.result }}"

          if [[ "${{ needs.deploy-testnet.result }}" == "success" ]]; then
            echo "✅ Testnet deployment successful"
          elif [[ "${{ needs.deploy-testnet.result }}" == "failure" ]]; then
            echo "❌ Testnet deployment failed"
          fi

          if [[ "${{ needs.deploy-mainnet.result }}" == "success" ]]; then
            echo "✅ Mainnet deployment successful"
          elif [[ "${{ needs.deploy-mainnet.result }}" == "failure" ]]; then
            echo "❌ Mainnet deployment failed"
          fi
