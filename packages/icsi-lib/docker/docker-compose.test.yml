services:
  dfx:
    build:
      context: ../../..
      dockerfile: packages/icsi-lib/docker/Dockerfile.dfx
    ports:
      - '4943:4943'
      - '8000:8000'
      - '8080:8080'
    volumes:
      - ../../../:/workspace
      - dfx_data:/root/.local/share/dfx
      - node_modules:/workspace/node_modules
      - pnpm_cache:/root/.local/share/pnpm
    environment:
      - DFX_NETWORK=local
      - DFX_CONFIG_ROOT=/root/.config/dfx
    command: >
      bash -c "
        cd /workspace &&
        echo 'Installing dependencies...' &&
        pnpm install &&
        echo 'Installing DFX...' &&
        curl -fsSL https://sdk.dfinity.org/install.sh | DFX_VERSION=0.22.0 bash -s -- --no-modify-path &&
        export PATH=\"/root/.local/share/dfx/bin:$$PATH\" &&
        echo 'Starting DFX with old metering...' &&
        dfx start --clean --host 0.0.0.0:4943 --use-old-metering &
        DFX_PID=$$! &&
        echo 'Waiting for DFX to be ready...' &&
        timeout 60 bash -c 'until curl -s http://localhost:4943/_/api/v2/status > /dev/null; do sleep 2; done' &&
        echo 'DFX is ready!' &&
        wait $$DFX_PID
      "
    healthcheck:
      test: ['CMD', 'curl', '-f', 'http://localhost:4943/_/api/v2/status']
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  test-tokens:
    build:
      context: ../../..
      dockerfile: packages/icsi-lib/docker/Dockerfile.dfx
    depends_on:
      dfx:
        condition: service_healthy
    volumes:
      - ../../../:/workspace
      - dfx_data:/root/.local/share/dfx
      - node_modules:/workspace/node_modules
      - pnpm_cache:/root/.local/share/pnpm
    environment:
      - DFX_NETWORK=local
      - DFX_CONFIG_ROOT=/root/.config/dfx
    working_dir: /workspace
    command: >
      bash -c "
        echo 'Installing dependencies...' &&
        pnpm install &&
        echo 'Installing DFX...' &&
        curl -fsSL https://sdk.dfinity.org/install.sh | DFX_VERSION=0.22.0 bash -s -- --no-modify-path &&
        export PATH=\"/root/.local/share/dfx/bin:$$PATH\" &&
        echo 'Deploying test token canisters...' &&
        cd /workspace &&
        ./packages/icsi-lib/scripts/deploy-test-tokens.sh
      "

  icsi-indexer:
    build:
      context: ../../..
      dockerfile: packages/icsi-lib/docker/Dockerfile.dfx
    depends_on:
      test-tokens:
        condition: service_completed_successfully
    volumes:
      - ../../../:/workspace
      - dfx_data:/root/.local/share/dfx
      - node_modules:/workspace/node_modules
      - pnpm_cache:/root/.local/share/pnpm
    environment:
      - DFX_NETWORK=local
      - DFX_CONFIG_ROOT=/root/.config/dfx
    working_dir: /workspace
    command: >
      bash -c "
        echo 'Installing dependencies...' &&
        pnpm install &&
        echo 'Installing DFX and tools...' &&
        curl -fsSL https://sdk.dfinity.org/install.sh | DFX_VERSION=0.22.0 bash -s -- --no-modify-path &&
        cargo install candid-extractor &&
        wget -O /usr/local/bin/didc \"https://github.com/dfinity/candid/releases/latest/download/didc-linux\" &&
        chmod +x /usr/local/bin/didc &&
        export PATH=\"/root/.local/share/dfx/bin:$$PATH\" &&
        echo 'Building canister...' &&
        pnpm run build:canister &&
        echo 'Deploying ICSI indexer canister...' &&
        ICP_CANISTER_ID=$$(dfx canister id icp_ledger_canister --network local) &&
        PRINCIPAL=$$(dfx identity get-principal) &&
        dfx deploy icp_subaccount_indexer --network local --argument \"(variant { Local }, 5: nat64, 0: nat32, \\\"$$ICP_CANISTER_ID\\\", \\\"$$PRINCIPAL\\\")\" &&
        echo 'Updating environment file with canister ID...' &&
        ICSI_CANISTER_ID=$$(dfx canister id icp_subaccount_indexer --network local) &&
        sed -i \"s/USER_VAULT_CANISTER_ID=/USER_VAULT_CANISTER_ID=$$ICSI_CANISTER_ID/\" packages/icsi-lib/.env.docker &&
        echo 'ICSI Indexer deployed with ID:' $$ICSI_CANISTER_ID
      "

volumes:
  dfx_data:
  node_modules:
  pnpm_cache:
